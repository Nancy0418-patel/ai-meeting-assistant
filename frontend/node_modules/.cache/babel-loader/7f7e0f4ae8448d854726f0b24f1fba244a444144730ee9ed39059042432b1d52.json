{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nancy\\\\OneDrive\\\\Desktop\\\\\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\\\Nancy\\\\5IT\\\\sgp\\\\ftry\\\\frontend\\\\src\\\\components\\\\SpeechToTextTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Card, CardContent, Typography, Button, Box, Select, MenuItem, FormControl, InputLabel, Alert, CircularProgress, Chip, Grid, Paper } from '@mui/material';\nimport { Mic, MicOff, Upload, PlayArrow, Stop, CheckCircle, Error } from '@mui/icons-material';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpeechToTextTest() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [selectedService, setSelectedService] = useState('gemini');\n  const [serviceStatus, setServiceStatus] = useState({});\n  const [audioFile, setAudioFile] = useState(null);\n  const fileInputRef = useRef(null);\n  const services = [{\n    value: 'openai',\n    label: 'OpenAI Whisper (Recommended)'\n  }, {\n    value: 'gemini',\n    label: 'Google Gemini (Free Tier Available)'\n  }, {\n    value: 'google',\n    label: 'Google Speech Recognition'\n  }, {\n    value: 'azure',\n    label: 'Azure Speech Services'\n  }, {\n    value: 'deepgram',\n    label: 'Deepgram'\n  }, {\n    value: 'assemblyai',\n    label: 'AssemblyAI'\n  }, {\n    value: 'offline',\n    label: 'Offline Recognition'\n  }];\n  const testServices = async () => {\n    try {\n      setIsTranscribing(true);\n      const response = await axios.get('/api/speech-to-text/test');\n      setServiceStatus(response.data.services);\n      toast.success('Service test completed');\n    } catch (error) {\n      console.error('Error testing services:', error);\n      toast.error('Failed to test services');\n    } finally {\n      setIsTranscribing(false);\n    }\n  };\n  const startLiveTranscription = async () => {\n    try {\n      setIsRecording(true);\n      setIsTranscribing(true);\n      setTranscription('');\n      const response = await axios.post('/api/speech-to-text/live', {\n        duration: 10,\n        // 10 seconds\n        service: selectedService\n      });\n      if (response.data.transcription.text) {\n        setTranscription(response.data.transcription.text);\n        toast.success('Transcription completed');\n      } else {\n        toast.warning('No speech detected');\n      }\n    } catch (error) {\n      console.error('Error with live transcription:', error);\n      toast.error('Failed to transcribe audio');\n    } finally {\n      setIsRecording(false);\n      setIsTranscribing(false);\n    }\n  };\n  const uploadAndTranscribe = async () => {\n    if (!audioFile) {\n      toast.warning('Please select an audio file');\n      return;\n    }\n    try {\n      setIsTranscribing(true);\n      const formData = new FormData();\n      formData.append('audio', audioFile);\n      formData.append('service', selectedService);\n      const response = await axios.post('/api/speech-to-text/transcribe', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data.transcription.text) {\n        setTranscription(response.data.transcription.text);\n        toast.success('File transcribed successfully');\n      } else {\n        toast.warning('No speech detected in file');\n      }\n    } catch (error) {\n      console.error('Error transcribing file:', error);\n      toast.error('Failed to transcribe file');\n    } finally {\n      setIsTranscribing(false);\n    }\n  };\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setAudioFile(file);\n    }\n  };\n  const renderServiceStatus = (service, status) => {\n    const serviceInfo = services.find(s => s.value === service);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 2,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.label) || service\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), status.available ? /*#__PURE__*/_jsxDEV(Chip, {\n          icon: /*#__PURE__*/_jsxDEV(CheckCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this),\n          label: \"Available\",\n          color: \"success\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n          icon: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this),\n          label: \"Not Available\",\n          color: \"error\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), status.error && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"error\",\n          sx: {\n            mt: 1,\n            display: 'block'\n          },\n          children: status.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, service, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      maxWidth: 1200,\n      mx: 'auto',\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Speech-to-Text Testing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Select Speech-to-Text Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedService,\n            onChange: e => setSelectedService(e.target.value),\n            label: \"Service\",\n            children: services.map(service => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: service.value,\n              children: service.label\n            }, service.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: testServices,\n          disabled: isTranscribing,\n          startIcon: isTranscribing ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(CheckCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 74\n          }, this),\n          children: \"Test All Services\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), Object.keys(serviceStatus).length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Service Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: Object.entries(serviceStatus).map(([service, status]) => renderServiceStatus(service, status))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Live Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mb: 2\n          },\n          children: \"Click to record 10 seconds of audio from your microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: isRecording ? 'secondary' : 'primary',\n          size: \"large\",\n          onClick: startLiveTranscription,\n          disabled: isTranscribing,\n          startIcon: isTranscribing ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this) : isRecording ? /*#__PURE__*/_jsxDEV(MicOff, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this),\n          children: isTranscribing ? 'Transcribing...' : isRecording ? 'Recording...' : 'Start Recording'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Upload Audio File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mb: 2\n          },\n          children: \"Upload an audio file (WAV, MP3, M4A, etc.) to transcribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"audio/*\",\n            onChange: handleFileSelect,\n            ref: fileInputRef,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => {\n              var _fileInputRef$current;\n              return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n            },\n            startIcon: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 26\n            }, this),\n            children: \"Select File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), audioFile && /*#__PURE__*/_jsxDEV(Chip, {\n            label: audioFile.name,\n            onDelete: () => setAudioFile(null),\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: uploadAndTranscribe,\n            disabled: !audioFile || isTranscribing,\n            startIcon: isTranscribing ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 43\n            }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 76\n            }, this),\n            children: \"Transcribe File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), transcription && /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Transcription Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            bgcolor: 'grey.100',\n            minHeight: 100\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: transcription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Setup Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          sx: {\n            mb: 2\n          },\n          children: \"To use speech-to-text services, you need to set up API keys in your .env file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Quick Start:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), \"1. Create a `.env` file in the backend folder\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), \"2. Add your API keys (start with OpenAI for best results)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), \"3. Restart the backend server\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), \"4. Test the services using the buttons above\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechToTextTest, \"J6AewELdODW4gz0aB96OUo/3Z/4=\");\n_c = SpeechToTextTest;\nexport default SpeechToTextTest;\nvar _c;\n$RefreshReg$(_c, \"SpeechToTextTest\");","map":{"version":3,"names":["React","useState","useRef","Card","CardContent","Typography","Button","Box","Select","MenuItem","FormControl","InputLabel","Alert","CircularProgress","Chip","Grid","Paper","Mic","MicOff","Upload","PlayArrow","Stop","CheckCircle","Error","axios","toast","jsxDEV","_jsxDEV","SpeechToTextTest","_s","isRecording","setIsRecording","isTranscribing","setIsTranscribing","transcription","setTranscription","selectedService","setSelectedService","serviceStatus","setServiceStatus","audioFile","setAudioFile","fileInputRef","services","value","label","testServices","response","get","data","success","error","console","startLiveTranscription","post","duration","service","text","warning","uploadAndTranscribe","formData","FormData","append","headers","handleFileSelect","event","file","target","files","renderServiceStatus","status","serviceInfo","find","s","item","xs","sm","md","children","sx","p","textAlign","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","available","icon","color","mt","display","maxWidth","mx","mb","fullWidth","onChange","e","map","onClick","disabled","startIcon","size","Object","keys","length","container","spacing","entries","gap","alignItems","type","accept","ref","style","_fileInputRef$current","current","click","name","onDelete","bgcolor","minHeight","severity","_c","$RefreshReg$"],"sources":["C:/Users/nancy/OneDrive/Desktop/ドキュメント/Nancy/5IT/sgp/ftry/frontend/src/components/SpeechToTextTest.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n  Grid,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  Mic,\r\n  MicOff,\r\n  Upload,\r\n  PlayArrow,\r\n  Stop,\r\n  CheckCircle,\r\n  Error,\r\n} from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction SpeechToTextTest() {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isTranscribing, setIsTranscribing] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [selectedService, setSelectedService] = useState('gemini');\r\n  const [serviceStatus, setServiceStatus] = useState({});\r\n  const [audioFile, setAudioFile] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  const services = [\r\n    { value: 'openai', label: 'OpenAI Whisper (Recommended)' },\r\n    { value: 'gemini', label: 'Google Gemini (Free Tier Available)' },\r\n    { value: 'google', label: 'Google Speech Recognition' },\r\n    { value: 'azure', label: 'Azure Speech Services' },\r\n    { value: 'deepgram', label: 'Deepgram' },\r\n    { value: 'assemblyai', label: 'AssemblyAI' },\r\n    { value: 'offline', label: 'Offline Recognition' },\r\n  ];\r\n\r\n  const testServices = async () => {\r\n    try {\r\n      setIsTranscribing(true);\r\n      const response = await axios.get('/api/speech-to-text/test');\r\n      setServiceStatus(response.data.services);\r\n      toast.success('Service test completed');\r\n    } catch (error) {\r\n      console.error('Error testing services:', error);\r\n      toast.error('Failed to test services');\r\n    } finally {\r\n      setIsTranscribing(false);\r\n    }\r\n  };\r\n\r\n  const startLiveTranscription = async () => {\r\n    try {\r\n      setIsRecording(true);\r\n      setIsTranscribing(true);\r\n      setTranscription('');\r\n      \r\n      const response = await axios.post('/api/speech-to-text/live', {\r\n        duration: 10, // 10 seconds\r\n        service: selectedService\r\n      });\r\n      \r\n      if (response.data.transcription.text) {\r\n        setTranscription(response.data.transcription.text);\r\n        toast.success('Transcription completed');\r\n      } else {\r\n        toast.warning('No speech detected');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error with live transcription:', error);\r\n      toast.error('Failed to transcribe audio');\r\n    } finally {\r\n      setIsRecording(false);\r\n      setIsTranscribing(false);\r\n    }\r\n  };\r\n\r\n  const uploadAndTranscribe = async () => {\r\n    if (!audioFile) {\r\n      toast.warning('Please select an audio file');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsTranscribing(true);\r\n      const formData = new FormData();\r\n      formData.append('audio', audioFile);\r\n      formData.append('service', selectedService);\r\n\r\n      const response = await axios.post('/api/speech-to-text/transcribe', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      if (response.data.transcription.text) {\r\n        setTranscription(response.data.transcription.text);\r\n        toast.success('File transcribed successfully');\r\n      } else {\r\n        toast.warning('No speech detected in file');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error transcribing file:', error);\r\n      toast.error('Failed to transcribe file');\r\n    } finally {\r\n      setIsTranscribing(false);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      setAudioFile(file);\r\n    }\r\n  };\r\n\r\n  const renderServiceStatus = (service, status) => {\r\n    const serviceInfo = services.find(s => s.value === service);\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} key={service}>\r\n        <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {serviceInfo?.label || service}\r\n          </Typography>\r\n          {status.available ? (\r\n            <Chip\r\n              icon={<CheckCircle />}\r\n              label=\"Available\"\r\n              color=\"success\"\r\n              variant=\"outlined\"\r\n            />\r\n          ) : (\r\n            <Chip\r\n              icon={<Error />}\r\n              label=\"Not Available\"\r\n              color=\"error\"\r\n              variant=\"outlined\"\r\n            />\r\n          )}\r\n          {status.error && (\r\n            <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\r\n              {status.error}\r\n            </Typography>\r\n          )}\r\n        </Paper>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Speech-to-Text Testing\r\n      </Typography>\r\n\r\n      {/* Service Selection */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Select Speech-to-Text Service\r\n          </Typography>\r\n          <FormControl fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel>Service</InputLabel>\r\n            <Select\r\n              value={selectedService}\r\n              onChange={(e) => setSelectedService(e.target.value)}\r\n              label=\"Service\"\r\n            >\r\n              {services.map((service) => (\r\n                <MenuItem key={service.value} value={service.value}>\r\n                  {service.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={testServices}\r\n            disabled={isTranscribing}\r\n            startIcon={isTranscribing ? <CircularProgress size={16} /> : <CheckCircle />}\r\n          >\r\n            Test All Services\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Service Status */}\r\n      {Object.keys(serviceStatus).length > 0 && (\r\n        <Card sx={{ mb: 3 }}>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Service Status\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              {Object.entries(serviceStatus).map(([service, status]) =>\r\n                renderServiceStatus(service, status)\r\n              )}\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Live Recording */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Live Recording\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Click to record 10 seconds of audio from your microphone\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color={isRecording ? 'secondary' : 'primary'}\r\n            size=\"large\"\r\n            onClick={startLiveTranscription}\r\n            disabled={isTranscribing}\r\n            startIcon={\r\n              isTranscribing ? (\r\n                <CircularProgress size={20} />\r\n              ) : isRecording ? (\r\n                <MicOff />\r\n              ) : (\r\n                <Mic />\r\n              )\r\n            }\r\n          >\r\n            {isTranscribing ? 'Transcribing...' : isRecording ? 'Recording...' : 'Start Recording'}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* File Upload */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Upload Audio File\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Upload an audio file (WAV, MP3, M4A, etc.) to transcribe\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n            <input\r\n              type=\"file\"\r\n              accept=\"audio/*\"\r\n              onChange={handleFileSelect}\r\n              ref={fileInputRef}\r\n              style={{ display: 'none' }}\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => fileInputRef.current?.click()}\r\n              startIcon={<Upload />}\r\n            >\r\n              Select File\r\n            </Button>\r\n            {audioFile && (\r\n              <Chip\r\n                label={audioFile.name}\r\n                onDelete={() => setAudioFile(null)}\r\n                color=\"primary\"\r\n              />\r\n            )}\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={uploadAndTranscribe}\r\n              disabled={!audioFile || isTranscribing}\r\n              startIcon={isTranscribing ? <CircularProgress size={16} /> : <PlayArrow />}\r\n            >\r\n              Transcribe File\r\n            </Button>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Transcription Results */}\r\n      {transcription && (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Transcription Result\r\n            </Typography>\r\n            <Paper sx={{ p: 2, bgcolor: 'grey.100', minHeight: 100 }}>\r\n              <Typography variant=\"body1\">\r\n                {transcription}\r\n              </Typography>\r\n            </Paper>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Setup Instructions */}\r\n      <Card sx={{ mt: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Setup Instructions\r\n          </Typography>\r\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n            To use speech-to-text services, you need to set up API keys in your .env file\r\n          </Alert>\r\n          <Typography variant=\"body2\">\r\n            <strong>Quick Start:</strong>\r\n            <br />\r\n            1. Create a `.env` file in the backend folder\r\n            <br />\r\n            2. Add your API keys (start with OpenAI for best results)\r\n            <br />\r\n            3. Restart the backend server\r\n            <br />\r\n            4. Test the services using the buttons above\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SpeechToTextTest;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SACEC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNC,QAAQ,EACRC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,IAAI,EACJC,IAAI,EACJC,KAAK,QACA,eAAe;AACtB,SACEC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,KAAK,QACA,qBAAqB;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACiC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACmC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpC,QAAQ,CAAC,QAAQ,CAAC;EAChE,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMyC,YAAY,GAAGxC,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMyC,QAAQ,GAAG,CACf;IAAEC,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA+B,CAAC,EAC1D;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAsC,CAAC,EACjE;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA4B,CAAC,EACvD;IAAED,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAwB,CAAC,EAClD;IAAED,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAW,CAAC,EACxC;IAAED,KAAK,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAa,CAAC,EAC5C;IAAED,KAAK,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAsB,CAAC,CACnD;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFb,iBAAiB,CAAC,IAAI,CAAC;MACvB,MAAMc,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,0BAA0B,CAAC;MAC5DT,gBAAgB,CAACQ,QAAQ,CAACE,IAAI,CAACN,QAAQ,CAAC;MACxClB,KAAK,CAACyB,OAAO,CAAC,wBAAwB,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C1B,KAAK,CAAC0B,KAAK,CAAC,yBAAyB,CAAC;IACxC,CAAC,SAAS;MACRlB,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAMoB,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI;MACFtB,cAAc,CAAC,IAAI,CAAC;MACpBE,iBAAiB,CAAC,IAAI,CAAC;MACvBE,gBAAgB,CAAC,EAAE,CAAC;MAEpB,MAAMY,QAAQ,GAAG,MAAMvB,KAAK,CAAC8B,IAAI,CAAC,0BAA0B,EAAE;QAC5DC,QAAQ,EAAE,EAAE;QAAE;QACdC,OAAO,EAAEpB;MACX,CAAC,CAAC;MAEF,IAAIW,QAAQ,CAACE,IAAI,CAACf,aAAa,CAACuB,IAAI,EAAE;QACpCtB,gBAAgB,CAACY,QAAQ,CAACE,IAAI,CAACf,aAAa,CAACuB,IAAI,CAAC;QAClDhC,KAAK,CAACyB,OAAO,CAAC,yBAAyB,CAAC;MAC1C,CAAC,MAAM;QACLzB,KAAK,CAACiC,OAAO,CAAC,oBAAoB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD1B,KAAK,CAAC0B,KAAK,CAAC,4BAA4B,CAAC;IAC3C,CAAC,SAAS;MACRpB,cAAc,CAAC,KAAK,CAAC;MACrBE,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAM0B,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI,CAACnB,SAAS,EAAE;MACdf,KAAK,CAACiC,OAAO,CAAC,6BAA6B,CAAC;MAC5C;IACF;IAEA,IAAI;MACFzB,iBAAiB,CAAC,IAAI,CAAC;MACvB,MAAM2B,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEtB,SAAS,CAAC;MACnCoB,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE1B,eAAe,CAAC;MAE3C,MAAMW,QAAQ,GAAG,MAAMvB,KAAK,CAAC8B,IAAI,CAAC,gCAAgC,EAAEM,QAAQ,EAAE;QAC5EG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIhB,QAAQ,CAACE,IAAI,CAACf,aAAa,CAACuB,IAAI,EAAE;QACpCtB,gBAAgB,CAACY,QAAQ,CAACE,IAAI,CAACf,aAAa,CAACuB,IAAI,CAAC;QAClDhC,KAAK,CAACyB,OAAO,CAAC,+BAA+B,CAAC;MAChD,CAAC,MAAM;QACLzB,KAAK,CAACiC,OAAO,CAAC,4BAA4B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD1B,KAAK,CAAC0B,KAAK,CAAC,2BAA2B,CAAC;IAC1C,CAAC,SAAS;MACRlB,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAM+B,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACRzB,YAAY,CAACyB,IAAI,CAAC;IACpB;EACF,CAAC;EAED,MAAMG,mBAAmB,GAAGA,CAACb,OAAO,EAAEc,MAAM,KAAK;IAC/C,MAAMC,WAAW,GAAG5B,QAAQ,CAAC6B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,KAAK,KAAKY,OAAO,CAAC;IAC3D,oBACE7B,OAAA,CAACZ,IAAI;MAAC2D,IAAI;MAACC,EAAE,EAAE,EAAG;MAACC,EAAE,EAAE,CAAE;MAACC,EAAE,EAAE,CAAE;MAAAC,QAAA,eAC9BnD,OAAA,CAACX,KAAK;QAAC+D,EAAE,EAAE;UAAEC,CAAC,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAH,QAAA,gBACvCnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAClC,CAAAP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE1B,KAAK,KAAIW;QAAO;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC,EACZjB,MAAM,CAACkB,SAAS,gBACf7D,OAAA,CAACb,IAAI;UACH2E,IAAI,eAAE9D,OAAA,CAACL,WAAW;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UACtB1C,KAAK,EAAC,WAAW;UACjB6C,KAAK,EAAC,SAAS;UACfR,OAAO,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,gBAEF5D,OAAA,CAACb,IAAI;UACH2E,IAAI,eAAE9D,OAAA,CAACJ,KAAK;YAAA6D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAChB1C,KAAK,EAAC,eAAe;UACrB6C,KAAK,EAAC,OAAO;UACbR,OAAO,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CACF,EACAjB,MAAM,CAACnB,KAAK,iBACXxB,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,SAAS;UAACQ,KAAK,EAAC,OAAO;UAACX,EAAE,EAAE;YAAEY,EAAE,EAAE,CAAC;YAAEC,OAAO,EAAE;UAAQ,CAAE;UAAAd,QAAA,EACzER,MAAM,CAACnB;QAAK;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACb;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC,GAzB4B/B,OAAO;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA0BvC,CAAC;EAEX,CAAC;EAED,oBACE5D,OAAA,CAACpB,GAAG;IAACwE,EAAE,EAAE;MAAEc,QAAQ,EAAE,IAAI;MAAEC,EAAE,EAAE,MAAM;MAAEd,CAAC,EAAE;IAAE,CAAE;IAAAF,QAAA,gBAC5CnD,OAAA,CAACtB,UAAU;MAAC6E,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAL,QAAA,EAAC;IAEtC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAGb5D,OAAA,CAACxB,IAAI;MAAC4E,EAAE,EAAE;QAAEgB,EAAE,EAAE;MAAE,CAAE;MAAAjB,QAAA,eAClBnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACjB,WAAW;UAACsF,SAAS;UAACjB,EAAE,EAAE;YAAEgB,EAAE,EAAE;UAAE,CAAE;UAAAjB,QAAA,gBACnCnD,OAAA,CAAChB,UAAU;YAAAmE,QAAA,EAAC;UAAO;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAChC5D,OAAA,CAACnB,MAAM;YACLoC,KAAK,EAAER,eAAgB;YACvB6D,QAAQ,EAAGC,CAAC,IAAK7D,kBAAkB,CAAC6D,CAAC,CAAC/B,MAAM,CAACvB,KAAK,CAAE;YACpDC,KAAK,EAAC,SAAS;YAAAiC,QAAA,EAEdnC,QAAQ,CAACwD,GAAG,CAAE3C,OAAO,iBACpB7B,OAAA,CAAClB,QAAQ;cAAqBmC,KAAK,EAAEY,OAAO,CAACZ,KAAM;cAAAkC,QAAA,EAChDtB,OAAO,CAACX;YAAK,GADDW,OAAO,CAACZ,KAAK;cAAAwC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAElB,CACX;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eACd5D,OAAA,CAACrB,MAAM;UACL4E,OAAO,EAAC,UAAU;UAClBkB,OAAO,EAAEtD,YAAa;UACtBuD,QAAQ,EAAErE,cAAe;UACzBsE,SAAS,EAAEtE,cAAc,gBAAGL,OAAA,CAACd,gBAAgB;YAAC0F,IAAI,EAAE;UAAG;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAAG5D,OAAA,CAACL,WAAW;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAAAT,QAAA,EAC9E;QAED;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,EAGNiB,MAAM,CAACC,IAAI,CAACnE,aAAa,CAAC,CAACoE,MAAM,GAAG,CAAC,iBACpC/E,OAAA,CAACxB,IAAI;MAAC4E,EAAE,EAAE;QAAEgB,EAAE,EAAE;MAAE,CAAE;MAAAjB,QAAA,eAClBnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACZ,IAAI;UAAC4F,SAAS;UAACC,OAAO,EAAE,CAAE;UAAA9B,QAAA,EACxB0B,MAAM,CAACK,OAAO,CAACvE,aAAa,CAAC,CAAC6D,GAAG,CAAC,CAAC,CAAC3C,OAAO,EAAEc,MAAM,CAAC,KACnDD,mBAAmB,CAACb,OAAO,EAAEc,MAAM,CACrC;QAAC;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACP,eAGD5D,OAAA,CAACxB,IAAI;MAAC4E,EAAE,EAAE;QAAEgB,EAAE,EAAE;MAAE,CAAE;MAAAjB,QAAA,eAClBnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,OAAO;UAACQ,KAAK,EAAC,gBAAgB;UAACX,EAAE,EAAE;YAAEgB,EAAE,EAAE;UAAE,CAAE;UAAAjB,QAAA,EAAC;QAElE;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACrB,MAAM;UACL4E,OAAO,EAAC,WAAW;UACnBQ,KAAK,EAAE5D,WAAW,GAAG,WAAW,GAAG,SAAU;UAC7CyE,IAAI,EAAC,OAAO;UACZH,OAAO,EAAE/C,sBAAuB;UAChCgD,QAAQ,EAAErE,cAAe;UACzBsE,SAAS,EACPtE,cAAc,gBACZL,OAAA,CAACd,gBAAgB;YAAC0F,IAAI,EAAE;UAAG;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC5BzD,WAAW,gBACbH,OAAA,CAACT,MAAM;YAAAkE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAEV5D,OAAA,CAACV,GAAG;YAAAmE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAET;UAAAT,QAAA,EAEA9C,cAAc,GAAG,iBAAiB,GAAGF,WAAW,GAAG,cAAc,GAAG;QAAiB;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAGP5D,OAAA,CAACxB,IAAI;MAAC4E,EAAE,EAAE;QAAEgB,EAAE,EAAE;MAAE,CAAE;MAAAjB,QAAA,eAClBnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,OAAO;UAACQ,KAAK,EAAC,gBAAgB;UAACX,EAAE,EAAE;YAAEgB,EAAE,EAAE;UAAE,CAAE;UAAAjB,QAAA,EAAC;QAElE;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACpB,GAAG;UAACwE,EAAE,EAAE;YAAEa,OAAO,EAAE,MAAM;YAAEkB,GAAG,EAAE,CAAC;YAAEC,UAAU,EAAE;UAAS,CAAE;UAAAjC,QAAA,gBACzDnD,OAAA;YACEqF,IAAI,EAAC,MAAM;YACXC,MAAM,EAAC,SAAS;YAChBhB,QAAQ,EAAEjC,gBAAiB;YAC3BkD,GAAG,EAAExE,YAAa;YAClByE,KAAK,EAAE;cAAEvB,OAAO,EAAE;YAAO;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,eACF5D,OAAA,CAACrB,MAAM;YACL4E,OAAO,EAAC,UAAU;YAClBkB,OAAO,EAAEA,CAAA;cAAA,IAAAgB,qBAAA;cAAA,QAAAA,qBAAA,GAAM1E,YAAY,CAAC2E,OAAO,cAAAD,qBAAA,uBAApBA,qBAAA,CAAsBE,KAAK,CAAC,CAAC;YAAA,CAAC;YAC7ChB,SAAS,eAAE3E,OAAA,CAACR,MAAM;cAAAiE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YAAAT,QAAA,EACvB;UAED;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACR/C,SAAS,iBACRb,OAAA,CAACb,IAAI;YACH+B,KAAK,EAAEL,SAAS,CAAC+E,IAAK;YACtBC,QAAQ,EAAEA,CAAA,KAAM/E,YAAY,CAAC,IAAI,CAAE;YACnCiD,KAAK,EAAC;UAAS;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CACF,eACD5D,OAAA,CAACrB,MAAM;YACL4E,OAAO,EAAC,WAAW;YACnBkB,OAAO,EAAEzC,mBAAoB;YAC7B0C,QAAQ,EAAE,CAAC7D,SAAS,IAAIR,cAAe;YACvCsE,SAAS,EAAEtE,cAAc,gBAAGL,OAAA,CAACd,gBAAgB;cAAC0F,IAAI,EAAE;YAAG;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,gBAAG5D,OAAA,CAACP,SAAS;cAAAgE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YAAAT,QAAA,EAC5E;UAED;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,EAGNrD,aAAa,iBACZP,OAAA,CAACxB,IAAI;MAAA2E,QAAA,eACHnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACX,KAAK;UAAC+D,EAAE,EAAE;YAAEC,CAAC,EAAE,CAAC;YAAEyC,OAAO,EAAE,UAAU;YAAEC,SAAS,EAAE;UAAI,CAAE;UAAA5C,QAAA,eACvDnD,OAAA,CAACtB,UAAU;YAAC6E,OAAO,EAAC,OAAO;YAAAJ,QAAA,EACxB5C;UAAa;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACP,eAGD5D,OAAA,CAACxB,IAAI;MAAC4E,EAAE,EAAE;QAAEY,EAAE,EAAE;MAAE,CAAE;MAAAb,QAAA,eAClBnD,OAAA,CAACvB,WAAW;QAAA0E,QAAA,gBACVnD,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,IAAI;UAACC,YAAY;UAAAL,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5D,OAAA,CAACf,KAAK;UAAC+G,QAAQ,EAAC,MAAM;UAAC5C,EAAE,EAAE;YAAEgB,EAAE,EAAE;UAAE,CAAE;UAAAjB,QAAA,EAAC;QAEtC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACR5D,OAAA,CAACtB,UAAU;UAAC6E,OAAO,EAAC,OAAO;UAAAJ,QAAA,gBACzBnD,OAAA;YAAAmD,QAAA,EAAQ;UAAY;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC7B5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,iDAEN,eAAA5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,6DAEN,eAAA5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,iCAEN,eAAA5D,OAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,gDAER;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC1D,EAAA,CAzSQD,gBAAgB;AAAAgG,EAAA,GAAhBhG,gBAAgB;AA2SzB,eAAeA,gBAAgB;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}